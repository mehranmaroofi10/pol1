
#include "Wire.h"
#include <SoftwareSerial.h>
//#include <stdio.h>
//#include <string.h>


/*******************************************************/
      
#define MCP23017_1_ADDRESS        0x20 // آدرس تراشه MCP23017
#define MCP23017_2_ADDRESS        0x21 // آدرس تراشه MCP23017
#define MCP23017_IODIRA           0x00  // آدرس رجيستر تنظيم پين‌هاي ورودي
#define MCP23017_GPIOA            0x12   // آدرس رجيستر پورت GPIOA
#define MCP23017_IODIRB           0x01  // آدرس رجيستر تنظيم پين‌هاي ورودي
#define MCP23017_GPIOB            0x13   // آدرس رجيستر پورت GPIOB
#define MCP23017_GPIO_OUTPUT      0x00

/*******************************************************/

void Mcp23017_Init_Gpio(char Gpio_Reg, char Input_Output_pin, char Mcp23017_Address);
uint8_t Mcp23017_Read_All_Pins(char Gpio, char Mcp23017_Address);
void Mcp23017_Gpio_Output_State(char Gpio, char pin, char Mcp23017_Address, char state);

/*******************************************************/
#define RS485_CONFIG_PIN                   6

//SoftwareSerial mySerial(5,4); //bool setPins(rxPin, txPin);

char receive_data_buffer[50] = {};
char separator = '-';
String gpio_number; 
String gpio_state; 
int gpio_number_int = 50;
int i = 0;
String recive_data = "";
String s_buffer = "";
char str[100] = {};

void setup() {

  pinMode(0, OUTPUT);
  digitalWrite(0, HIGH);

  Wire.setPins(40, 41); //bool setPins(int sdaPin, int sclPin);
  Wire.begin(); // wake up I2C bus

  pinMode(RS485_CONFIG_PIN, OUTPUT);
  digitalWrite(RS485_CONFIG_PIN, LOW);

  //mySerial.begin(9600);
  Serial1.begin(9600,SERIAL_8N1,5,4,false);
  Serial1.setTimeout(50);
 // Serial.begin(115200);

  Mcp23017_Init_Gpio(MCP23017_IODIRA, MCP23017_GPIO_OUTPUT, MCP23017_1_ADDRESS);
  Mcp23017_Init_Gpio(MCP23017_IODIRB, MCP23017_GPIO_OUTPUT, MCP23017_1_ADDRESS);
  Mcp23017_Init_Gpio(MCP23017_IODIRA, MCP23017_GPIO_OUTPUT, MCP23017_2_ADDRESS);
  Mcp23017_Init_Gpio(MCP23017_IODIRB, MCP23017_GPIO_OUTPUT, MCP23017_2_ADDRESS);

}

void loop() {

if(Serial1.available() > 0)
{
  recive_data = Serial1.readString();

  recive_data.trim();
  recive_data.toCharArray(receive_data_buffer, 50);
  i = 0;
  s_buffer.clear();
  while (receive_data_buffer[i] != '\0') 
  {
    if (receive_data_buffer[i] != separator) 
    {
      s_buffer += receive_data_buffer[i]; 
    }
    else
    {
      gpio_number = s_buffer;
      s_buffer.clear();
    }
    i++;
  }
  gpio_state = s_buffer;

  // Serial.println(gpio_number);
  // Serial.println(gpio_state);
  // Serial.println(gpio_number.toInt());
    
  if(Relay_State(gpio_number.toInt(), gpio_state) == true)
  {
    //Serial.println(gpio_number.toInt());
    sprintf(str, "%s-%s", gpio_number, gpio_state);
    // Serial.println(str);
    rsprint(str);
  }
  else
  {
    if(Relay_State(gpio_number.toInt(), gpio_state) == true)
    {
      sprintf(str, "%s-%s", gpio_number, gpio_state);
      // Serial.println(str);
      rsprint(str);
    }
  }
  }
}

/*******************************************************/
bool Relay_State(int Relay_Number, String Relay_State)
{
  delay(100);
  if(Relay_State == "On")
  {
    if(Relay_Number <= 8)
    {
      if(Relay_Number >= 5)
      {
        Mcp23017_Gpio_Output_State(MCP23017_GPIOB, (12 - Relay_Number), MCP23017_2_ADDRESS, 1);
      }
      else 
      {
        Mcp23017_Gpio_Output_State(MCP23017_GPIOB, (Relay_Number - 1), MCP23017_2_ADDRESS, 1);
      }
    }
    else if(Relay_Number > 8 && Relay_Number <= 16)
    {
      Mcp23017_Gpio_Output_State(MCP23017_GPIOB, (Relay_Number - 9), MCP23017_1_ADDRESS, 1);
    }
    else if(Relay_Number > 16 && Relay_Number <= 24)
    {
      if(Relay_Number >= 21)
      {
        Mcp23017_Gpio_Output_State(MCP23017_GPIOA, (28 - Relay_Number), MCP23017_2_ADDRESS, 1);
      }
      else
      {
        Mcp23017_Gpio_Output_State(MCP23017_GPIOA, (Relay_Number - 17), MCP23017_2_ADDRESS, 1);
      }
    }
    else if(Relay_Number > 24 && Relay_Number <= 32)
    {
      Mcp23017_Gpio_Output_State(MCP23017_GPIOA, (Relay_Number - 25), MCP23017_1_ADDRESS, 1);
    }
    else 
    {
      return false;
    }
  }
  else if(Relay_State == "Off")
  {
    if(Relay_Number <= 8)
    {
      if(Relay_Number >= 5)
      {
        Mcp23017_Gpio_Output_State(MCP23017_GPIOB, (12 - Relay_Number), MCP23017_2_ADDRESS, 0);
      }
      else 
      {
        Mcp23017_Gpio_Output_State(MCP23017_GPIOB, (Relay_Number - 1), MCP23017_2_ADDRESS, 0);
      }
    }
    else if(Relay_Number > 8 && Relay_Number <= 16)
    {
      Mcp23017_Gpio_Output_State(MCP23017_GPIOB, (Relay_Number - 9), MCP23017_1_ADDRESS, 0);
    }
    else if(Relay_Number > 16 && Relay_Number <= 24)
    {
      if(Relay_Number >= 21)
      {
        Mcp23017_Gpio_Output_State(MCP23017_GPIOA, (28 - Relay_Number), MCP23017_2_ADDRESS, 0);
      }
      else
      {
        Mcp23017_Gpio_Output_State(MCP23017_GPIOA, (Relay_Number - 17), MCP23017_2_ADDRESS, 0);
      }
    }
    else if(Relay_Number > 24 && Relay_Number <= 32)
    {
      Mcp23017_Gpio_Output_State(MCP23017_GPIOA, (Relay_Number - 25), MCP23017_1_ADDRESS, 0);
    }
    else 
    {
      return false;
    }
  }
  else
  {
    return false;
  }
  return true;
}

/*******************************************************/

void Mcp23017_Init_Gpio(char Gpio_Reg, char Input_Output_pin, char Mcp23017_Address)
{
    Wire.beginTransmission(Mcp23017_Address);     
    Wire.write(Gpio_Reg); // IODIRA register
    Wire.write(Input_Output_pin); // set all of port A to outputs
    Wire.endTransmission();
}

void Mcp23017_Gpio_Output_State(char Gpio, char pin, char Mcp23017_Address, char state)
{
    uint8_t perior_pin_state = 0;
    perior_pin_state = Mcp23017_Read_All_Pins(Gpio, Mcp23017_Address); 
    
    if(state)
    {
        perior_pin_state |= (1 << pin);
    }
    else
    {
        perior_pin_state &=  ~(1 << pin);
    }
    
    Wire.beginTransmission(Mcp23017_Address);     
    Wire.write(Gpio); 
    Wire.write(perior_pin_state);
    Wire.endTransmission();
}

uint8_t Mcp23017_Read_All_Pins(char Gpio, char Mcp23017_Address) {
    uint8_t pins_state = 0;

     Wire.beginTransmission(Mcp23017_Address);
     Wire.write(Gpio);
     Wire.endTransmission();

     Wire.requestFrom(Mcp23017_Address, 1);

    if (Wire.available()) {
    pins_state = Wire.read(); // خواندن داده ارسال شده توسط MCP23017
  }
      
    return pins_state;
}

void rsprint(String pri){
  digitalWrite(RS485_CONFIG_PIN,HIGH);
  delay(100);
  Serial1.println(pri);
  delay(100);
  digitalWrite(RS485_CONFIG_PIN,LOW);
  delay(250);
  Serial1.flush();
  }
